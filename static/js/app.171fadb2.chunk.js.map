{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","loadWork","work","AsyncStorage","getItem","useEffect","loadToDos","onChangeWork","type","setItem","saveToDos","toSave","JSON","stringify","s","parse","addToDo","newToDos","Date","now","complete","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","event","onTodoChange","toDoTextComplete","control","completeToDo","Fontisto","check","name","size","Platform","OS","confirm","Alert","alert","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","textDecorationLine"],"mappings":"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","file":"static/js/app.171fadb2.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#1A1C20\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n    TextInput,\n    Alert,\n    ScrollView,\n    Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n    const [working, setWorking] = useState(true);\n    const [text, setText] = useState(\"\");\n    const [toDos, setToDos] = useState({});\n    const loadWork = async () => {\n        const work = await AsyncStorage.getItem(\"@work\");\n        if (work == \"work\") {\n            setWorking(true);\n        } else {\n            setWorking(false);\n        }\n    };\n    useEffect(() => {\n        loadToDos();\n        loadWork();\n    }, []);\n    const travel = () => setWorking(false);\n    const work = () => setWorking(true);\n    const onChangeWork = async (type) => {\n        if (type == \"work\") {\n            setWorking(true);\n            await AsyncStorage.setItem(\"@work\", \"work\");\n        } else {\n            setWorking(false);\n            await AsyncStorage.setItem(\"@work\", \"travel\");\n        }\n    };\n    const onChangeText = (payload) => setText(payload);\n    const onTodoChange = (payload, key) => {\n        const newToDos = { ...toDos };\n        newToDos[key].text = payload;\n        setToDos(newToDos);\n        saveToDos(newToDos);\n    };\n    const saveToDos = async (toSave) => {\n        await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    };\n    const loadToDos = async () => {\n        const s = await AsyncStorage.getItem(STORAGE_KEY);\n        if (s) {\n            setToDos(JSON.parse(s));\n        }\n    };\n    const addToDo = async () => {\n        if (text === \"\") {\n            return;\n        }\n        const newToDos = {\n            ...toDos,\n            [Date.now()]: { text, working, complete: false },\n        };\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n        setText(\"\");\n    };\n    const completeToDo = (key) => {\n        if (toDos[key].complete == false) {\n            const newToDos = { ...toDos };\n            newToDos[key].complete = true;\n            setToDos(newToDos);\n            saveToDos(newToDos);\n        } else {\n            const newToDos = { ...toDos };\n            newToDos[key].complete = false;\n            setToDos(newToDos);\n            saveToDos(newToDos);\n        }\n    };\n    const deleteToDo = (key) => {\n        if (Platform.OS === \"web\") {\n            const ok = confirm(\"Do you want to delete this To Do?\");\n            if (ok) {\n                const newToDos = { ...toDos };\n                delete newToDos[key];\n                setToDos(newToDos);\n                saveToDos(newToDos);\n            }\n        } else {\n            Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n                { text: \"Cancel\" },\n                {\n                    text: \"I'm Sure\",\n                    style: \"destructive\",\n                    onPress: () => {\n                        const newToDos = { ...toDos };\n                        delete newToDos[key];\n                        setToDos(newToDos);\n                        saveToDos(newToDos);\n                    },\n                },\n            ]);\n        }\n    };\n    return (\n        <View style={styles.container}>\n            <StatusBar style=\"auto\" />\n            <View style={styles.header}>\n                <TouchableOpacity onPress={() => onChangeWork(\"work\")}>\n                    <Text\n                        style={{\n                            fontSize: 38,\n                            fontWeight: \"600\",\n                            color: working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Work\n                    </Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => onChangeWork(\"travel\")}>\n                    <Text\n                        style={{\n                            fontSize: 38,\n                            fontWeight: \"600\",\n                            color: !working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Travel\n                    </Text>\n                </TouchableOpacity>\n            </View>\n            <TextInput\n                onSubmitEditing={addToDo}\n                onChangeText={onChangeText}\n                returnKeyType=\"done\"\n                value={text}\n                placeholder={\n                    working\n                        ? \"What do you have to do?\"\n                        : \"Where do you want to go?\"\n                }\n                style={styles.input}\n            />\n            <ScrollView>\n                {Object.keys(toDos).map((key) =>\n                    toDos[key].working == working ? (\n                        <View style={styles.toDo} key={key}>\n                            {toDos[key].complete == false ? (\n                                <TextInput\n                                    style={styles.toDoText}\n                                    value={toDos[key].text}\n                                    onChangeText={(event) =>\n                                        onTodoChange(event, key)\n                                    }\n                                />\n                            ) : (\n                                <Text style={styles.toDoTextComplete}>\n                                    {toDos[key].text}\n                                </Text>\n                            )}\n\n                            <View style={styles.control}>\n                                <TouchableOpacity\n                                    onPress={() => completeToDo(key)}\n                                >\n                                    <Fontisto\n                                        style={styles.check}\n                                        name=\"check\"\n                                        size={16}\n                                        color={theme.grey}\n                                    />\n                                </TouchableOpacity>\n\n                                <TouchableOpacity\n                                    onPress={() => deleteToDo(key)}\n                                >\n                                    <Fontisto\n                                        name=\"trash\"\n                                        size={18}\n                                        color={theme.grey}\n                                    />\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    ) : null\n                )}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: theme.bg,\n        paddingHorizontal: 20,\n    },\n    header: {\n        justifyContent: \"space-between\",\n        flexDirection: \"row\",\n        marginTop: 100,\n    },\n    input: {\n        backgroundColor: \"white\",\n        paddingVertical: 15,\n        paddingHorizontal: 20,\n        borderRadius: 30,\n        marginVertical: 20,\n        fontSize: 18,\n    },\n    toDo: {\n        backgroundColor: theme.toDoBg,\n        marginBottom: 10,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        borderRadius: 15,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n    },\n    toDoText: {\n        color: \"white\",\n        fontSize: 16,\n        fontWeight: \"600\",\n    },\n    toDoTextComplete: {\n        color: theme.grey,\n        fontSize: 16,\n        fontWeight: \"500\",\n        textDecorationLine: \"line-through\",\n    },\n    control: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n    },\n    check: {\n        paddingHorizontal: 10,\n    },\n});"],"sourceRoot":""}