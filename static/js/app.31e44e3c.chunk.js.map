{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","AsyncStorage","setItem","JSON","stringify","s","getItem","parse","addToDo","newToDos","Date","now","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.31e44e3c.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#1A1C20\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n  ScrollView,\n  Platform\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n    setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n      await saveToDos(newToDos);\n      setText(\"\");\n    };\n  const deleteToDo = (key) => {\n    if (Platform.OS == \"web\") {\n      const ok = confirm (\"Do you want to delete this To Do?\")\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]); \n    }\n  };\n  return (\n  <View style={styles.container}>\n    <StatusBar style=\"auto\" />\n    <View style={styles.header}>\n      <TouchableOpacity onPress={work}>\n        <Text\n          style={{\n            fontSize: 38,\n            fontWeight: \"600\",\n            color: working ? \"white\" : theme.grey\n          }}\n        >\n            Work\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey\n              }}\n            >\n              Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={\n          working ? \"What do you have to do?\" : \"Where do you want to go?\"\n        }\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});"],"sourceRoot":""}